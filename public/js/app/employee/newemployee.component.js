"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var error_service_1 = require("../errors/error.service");
var employee_service_1 = require("./employee.service");
var common_1 = require("@angular/common");
var accordiongroup_component_1 = require("../utility/accordiongroup.component");
var accordion_component_1 = require("../utility/accordion.component");
var employee_1 = require("./employee");
var NewEmployeeComponent = (function () {
    function NewEmployeeComponent(_fb, _employeeService, _errorService) {
        this._fb = _fb;
        this._employeeService = _employeeService;
        this._errorService = _errorService;
        this.country = '';
    }
    NewEmployeeComponent.prototype.ngOnInit = function () {
        this.myForm = this._fb.group({
            firstName: ['', common_1.Validators.required],
            lastName: ['', common_1.Validators.required],
            email: ['', common_1.Validators.compose([
                    common_1.Validators.required,
                    this.isEmail
                ])],
            phone: ['', common_1.Validators.required],
            country: ['', common_1.Validators.required],
            city: ['', common_1.Validators.required],
            state: [''],
            title: [''],
            division: [''],
            department: [''],
            projects: [''],
            employees: [''],
            manager: ['']
        });
    };
    NewEmployeeComponent.prototype.onCountryChange = function (val) {
        this.country = val;
        console.log(val);
    };
    NewEmployeeComponent.prototype.onSubmit = function () {
        console.log('submitted');
        var employee = new employee_1.Employee(this.myForm.value.email, null, this.myForm.value.firstName, this.myForm.value.lastName, this.myForm.value.phone, this.myForm.value.country, this.myForm.value.city, this.myForm.value.state, this.myForm.value.title, this.myForm.value.division, this.myForm.value.department, this.myForm.value.manager, this.myForm.value.employees, this.myForm.value.projects);
        console.log(employee);
        this._employeeService.createUser(employee).subscribe(function (data) { return console.log(data); }, function (error) { return console.log(error); });
    };
    NewEmployeeComponent.prototype.isEmail = function (control) {
        if (!control.value.match("[-a-z0-9~!$%^&*_=+}{\'?]+(\.[-a-z0-9~!$%^&*_=+}{\'?]+)*@([a-z0-9_][-a-z0-9_]*(\.[-a-z0-9_]+)*\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-z][a-z])|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(:[0-9]{1,5})?")) {
            return { invalidMail: true };
        }
    };
    NewEmployeeComponent = __decorate([
        core_1.Component({
            selector: "my-new-employee",
            template: "\n        <h1>New Employee</h1>\n        <form [ngFormModel]=\"myForm\" (ngSubmit)=\"onSubmit()\">\n            <accordion>\n                <accordion-group heading=\"Required\" isOpen=\"true\">\n                    <div class=\"form-group\">\n                    <label for=\"firstName\">First Name:</label>\n                    <input type=\"text\" [ngFormControl]=\"myForm.find('firstName')\" id=\"firstName\" class=\"form-control\"/>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"lastName\">Last Name:</label>\n                    <input type=\"text\" [ngFormControl]=\"myForm.find('lastName')\" id=\"lastName\" class=\"form-control\"/>\n                </div>\n                <!--Still need to add image uploading capability-->\n                <div class=\"form-group\">\n                    <label for=\"email\">Email</label>\n                    <input type=\"email\" [ngFormControl]=\"myForm.find('email')\" id=\"email\" class=\"form-control\"/>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"phone\">Phone:</label>\n                    <input type=\"text\" [ngFormControl]=\"myForm.find('phone')\" id=\"phone\" class=\"form-control\"/>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"country\">Country</label>\n                    <select [ngFormControl]=\"myForm.find('country')\" id=\"country\" #t (change)=\"onCountryChange(t.value)\" class=\"form-control\">\n                        <option>USA</option>\n                        <option>Italy</option>\n                        <option>Brazil</option>\n                    </select>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"city\">City</label>\n                    <input type=\"text\" [ngFormControl]=\"myForm.find('city')\" id=\"city\" class=\"form-control\"/>\n                </div>\n                <div class=\"form-group\" *ngIf=\"country!='' && country=='USA'\">\n                    <label for=\"state\">State:</label>\n                    <select [ngFormControl]=\"myForm.find('state')\" id=\"state\" class=\"form-control\">\n                        <option>Illinois</option>\n                        <option>Michigan</option>\n                        <option>North Carolina</option>\n                        <option>Washington</option>\n                        <option>Florida</option>\n                    </select>\n                </div>\n                </accordion-group>\n                <accordion-group heading=\"Employee Data (optional)\">\n                    <div class=\"form-group\">\n                        <label for=\"title\">Title:</label>\n                        <select id=\"title\" [ngFormControl]=\"myForm.find('title')\" class=\"form-control\">\n                            <option>Analyst A1</option>\n                            <option>Analyst A2</option>\n                            <option>Consultant C1</option>\n                            <option>Manager</option>\n                        </select>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"division\">Division</label>\n                        <select id=\"division\" [ngFormControl]=\"myForm.find('division')\" class=\"form-control\">\n                            <option>Hyla Soft USA</option>\n                            <option>Hyla Soft Italy</option>\n                            <option>Hyla soft Brazil</option>\n                        </select>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"department\">Department</label>\n                        <select id=\"department\" [ngFormControl]=\"myForm.find('department')\" class=\"form-control\">\n                            <option>Software</option>\n                            <option>PLM</option>\n                            <option>MES</option>\n                        </select>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"Manager\">Manager</label>\n                        <select id=\"manager\" [ngFormControl]=\"myForm.find('manager')\" class=\"form-control\">\n                            <option>Unassigned</option>\n                            <option>David Kaparis</option>\n                            <option>Ettore Soldi</option>\n                            <option>Jason McDonald</option>\n                        </select>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"employees\">Employees</label>\n                        <select id=\"employees\" [ngFormControl]=\"myForm.find('employees')\" multiple class=\"form-control\">\n                            <option>Paul Siebert</option>\n                            <option>Casey Townsend</option>\n                            <option>Jon Netzky</option>\n                            <option>Dario Casula</option>\n                            <option>Logan Habben</option>\n                        </select>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"projects\">Projects</label>\n                        <select id=\"projects\" [ngFormControl]=\"myForm.find('projects')\" class=\"form-control\">\n                            <option>Kuka</option>\n                            <option>Monsanto</option>\n                            <option>Williams</option>\n                        </select>\n                    </div>\n                </accordion-group>\n                <accordion-group heading=\"Resume (optional)\"><h1>Resume Upload Capability & skills section</h1></accordion-group>\n                <accordion-group heading=\"Training (optional)\"><h1>Training and Info</h1></accordion-group>\n                <accordion-group heading=\"Benefits (optional)\"><h1>Benefits information</h1></accordion-group>\n            </accordion>\n            <button type=\"submit\" class=\"btn btn-primary btn-lg\">Submit</button>\n        </form>\n    ",
            providers: [employee_service_1.EmployeeService],
            directives: [accordion_component_1.AccordionComponent, accordiongroup_component_1.AccordionComponentGroup]
        }), 
        __metadata('design:paramtypes', [common_1.FormBuilder, employee_service_1.EmployeeService, error_service_1.ErrorService])
    ], NewEmployeeComponent);
    return NewEmployeeComponent;
}());
exports.NewEmployeeComponent = NewEmployeeComponent;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVtcGxveWVlL25ld2VtcGxveWVlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEscUJBQWdDLGVBQWUsQ0FBQyxDQUFBO0FBQ2hELDhCQUEyQix5QkFBeUIsQ0FBQyxDQUFBO0FBQ3JELGlDQUE4QixvQkFBb0IsQ0FBQyxDQUFBO0FBQ25ELHVCQUE2RCxpQkFBaUIsQ0FBQyxDQUFBO0FBQy9FLHlDQUFzQyxxQ0FBcUMsQ0FBQyxDQUFBO0FBQzVFLG9DQUFpQyxnQ0FBZ0MsQ0FBQyxDQUFBO0FBQ2xFLHlCQUF1QixZQUFZLENBQUMsQ0FBQTtBQWdIcEM7SUFHSSw4QkFBb0IsR0FBZSxFQUFTLGdCQUFnQyxFQUFTLGFBQTRCO1FBQTdGLFFBQUcsR0FBSCxHQUFHLENBQVk7UUFBUyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWdCO1FBQVMsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFEakgsWUFBTyxHQUFRLEVBQUUsQ0FBQztJQUNpRyxDQUFDO0lBQ3BILHVDQUFRLEdBQVI7UUFDSSxJQUFJLENBQUMsTUFBTSxHQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO1lBQ3ZCLFNBQVMsRUFBQyxDQUFDLEVBQUUsRUFBQyxtQkFBVSxDQUFDLFFBQVEsQ0FBQztZQUNsQyxRQUFRLEVBQUMsQ0FBQyxFQUFFLEVBQUMsbUJBQVUsQ0FBQyxRQUFRLENBQUM7WUFDakMsS0FBSyxFQUFDLENBQUMsRUFBRSxFQUFDLG1CQUFVLENBQUMsT0FBTyxDQUFDO29CQUN6QixtQkFBVSxDQUFDLFFBQVE7b0JBQ25CLElBQUksQ0FBQyxPQUFPO2lCQUNmLENBQUMsQ0FBQztZQUNILEtBQUssRUFBQyxDQUFDLEVBQUUsRUFBQyxtQkFBVSxDQUFDLFFBQVEsQ0FBQztZQUM5QixPQUFPLEVBQUMsQ0FBQyxFQUFFLEVBQUMsbUJBQVUsQ0FBQyxRQUFRLENBQUM7WUFDaEMsSUFBSSxFQUFDLENBQUMsRUFBRSxFQUFDLG1CQUFVLENBQUMsUUFBUSxDQUFDO1lBQzdCLEtBQUssRUFBQyxDQUFDLEVBQUUsQ0FBQztZQUNWLEtBQUssRUFBQyxDQUFDLEVBQUUsQ0FBQztZQUNWLFFBQVEsRUFBQyxDQUFDLEVBQUUsQ0FBQztZQUNiLFVBQVUsRUFBQyxDQUFDLEVBQUUsQ0FBQztZQUNmLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUNkLFNBQVMsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUNmLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQztTQUNoQixDQUFDLENBQUE7SUFDTixDQUFDO0lBQ0QsOENBQWUsR0FBZixVQUFnQixHQUFHO1FBQ2YsSUFBSSxDQUFDLE9BQU8sR0FBQyxHQUFHLENBQUM7UUFDakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBQ0QsdUNBQVEsR0FBUjtRQUNJLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDekIsSUFBTSxRQUFRLEdBQUcsSUFBSSxtQkFBUSxDQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQ3ZCLElBQUksRUFDSixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQzNCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFDMUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFDdEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFDMUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUM1QixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFDM0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUM3QixDQUFDO1FBQ0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFNBQVMsQ0FDaEQsVUFBQSxJQUFJLElBQUksT0FBQSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFqQixDQUFpQixFQUN6QixVQUFBLEtBQUssSUFBSSxPQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQWxCLENBQWtCLENBQzlCLENBQUE7SUFDTCxDQUFDO0lBQ08sc0NBQU8sR0FBZixVQUFnQixPQUFpQjtRQUM3QixFQUFFLENBQUEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLDZQQUE2UCxDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQ3BSLE1BQU0sQ0FBQyxFQUFDLFdBQVcsRUFBQyxJQUFJLEVBQUMsQ0FBQTtRQUM3QixDQUFDO0lBQ0wsQ0FBQztJQXZLTDtRQUFDLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsaUJBQWlCO1lBQzNCLFFBQVEsRUFBQyxva01BeUdSO1lBQ0QsU0FBUyxFQUFDLENBQUMsa0NBQWUsQ0FBQztZQUMzQixVQUFVLEVBQUMsQ0FBQyx3Q0FBa0IsRUFBQyxrREFBdUIsQ0FBQztTQUMxRCxDQUFDOzs0QkFBQTtJQTJERiwyQkFBQztBQUFELENBMURBLEFBMERDLElBQUE7QUExRFksNEJBQW9CLHVCQTBEaEMsQ0FBQSIsImZpbGUiOiJlbXBsb3llZS9uZXdlbXBsb3llZS5jb21wb25lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgT25Jbml0fSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQge0Vycm9yU2VydmljZX0gZnJvbSBcIi4uL2Vycm9ycy9lcnJvci5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7RW1wbG95ZWVTZXJ2aWNlfSBmcm9tIFwiLi9lbXBsb3llZS5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7Rm9ybUJ1aWxkZXIsIENvbnRyb2xHcm91cCwgVmFsaWRhdG9ycywgQ29udHJvbH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xyXG5pbXBvcnQge0FjY29yZGlvbkNvbXBvbmVudEdyb3VwfSBmcm9tIFwiLi4vdXRpbGl0eS9hY2NvcmRpb25ncm91cC5jb21wb25lbnRcIjtcclxuaW1wb3J0IHtBY2NvcmRpb25Db21wb25lbnR9IGZyb20gXCIuLi91dGlsaXR5L2FjY29yZGlvbi5jb21wb25lbnRcIjtcclxuaW1wb3J0IHtFbXBsb3llZX0gZnJvbSBcIi4vZW1wbG95ZWVcIjtcclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogXCJteS1uZXctZW1wbG95ZWVcIixcclxuICAgIHRlbXBsYXRlOmBcclxuICAgICAgICA8aDE+TmV3IEVtcGxveWVlPC9oMT5cclxuICAgICAgICA8Zm9ybSBbbmdGb3JtTW9kZWxdPVwibXlGb3JtXCIgKG5nU3VibWl0KT1cIm9uU3VibWl0KClcIj5cclxuICAgICAgICAgICAgPGFjY29yZGlvbj5cclxuICAgICAgICAgICAgICAgIDxhY2NvcmRpb24tZ3JvdXAgaGVhZGluZz1cIlJlcXVpcmVkXCIgaXNPcGVuPVwidHJ1ZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImZpcnN0TmFtZVwiPkZpcnN0IE5hbWU6PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBbbmdGb3JtQ29udHJvbF09XCJteUZvcm0uZmluZCgnZmlyc3ROYW1lJylcIiBpZD1cImZpcnN0TmFtZVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJsYXN0TmFtZVwiPkxhc3QgTmFtZTo8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIFtuZ0Zvcm1Db250cm9sXT1cIm15Rm9ybS5maW5kKCdsYXN0TmFtZScpXCIgaWQ9XCJsYXN0TmFtZVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8IS0tU3RpbGwgbmVlZCB0byBhZGQgaW1hZ2UgdXBsb2FkaW5nIGNhcGFiaWxpdHktLT5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImVtYWlsXCI+RW1haWw8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiZW1haWxcIiBbbmdGb3JtQ29udHJvbF09XCJteUZvcm0uZmluZCgnZW1haWwnKVwiIGlkPVwiZW1haWxcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwicGhvbmVcIj5QaG9uZTo8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIFtuZ0Zvcm1Db250cm9sXT1cIm15Rm9ybS5maW5kKCdwaG9uZScpXCIgaWQ9XCJwaG9uZVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJjb3VudHJ5XCI+Q291bnRyeTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBbbmdGb3JtQ29udHJvbF09XCJteUZvcm0uZmluZCgnY291bnRyeScpXCIgaWQ9XCJjb3VudHJ5XCIgI3QgKGNoYW5nZSk9XCJvbkNvdW50cnlDaGFuZ2UodC52YWx1ZSlcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPlVTQTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPkl0YWx5PC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+QnJhemlsPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImNpdHlcIj5DaXR5PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBbbmdGb3JtQ29udHJvbF09XCJteUZvcm0uZmluZCgnY2l0eScpXCIgaWQ9XCJjaXR5XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIi8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCIgKm5nSWY9XCJjb3VudHJ5IT0nJyAmJiBjb3VudHJ5PT0nVVNBJ1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJzdGF0ZVwiPlN0YXRlOjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBbbmdGb3JtQ29udHJvbF09XCJteUZvcm0uZmluZCgnc3RhdGUnKVwiIGlkPVwic3RhdGVcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPklsbGlub2lzPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+TWljaGlnYW48L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj5Ob3J0aCBDYXJvbGluYTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPldhc2hpbmd0b248L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj5GbG9yaWRhPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvYWNjb3JkaW9uLWdyb3VwPlxyXG4gICAgICAgICAgICAgICAgPGFjY29yZGlvbi1ncm91cCBoZWFkaW5nPVwiRW1wbG95ZWUgRGF0YSAob3B0aW9uYWwpXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cInRpdGxlXCI+VGl0bGU6PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpZD1cInRpdGxlXCIgW25nRm9ybUNvbnRyb2xdPVwibXlGb3JtLmZpbmQoJ3RpdGxlJylcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj5BbmFseXN0IEExPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPkFuYWx5c3QgQTI8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+Q29uc3VsdGFudCBDMTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj5NYW5hZ2VyPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJkaXZpc2lvblwiPkRpdmlzaW9uPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpZD1cImRpdmlzaW9uXCIgW25nRm9ybUNvbnRyb2xdPVwibXlGb3JtLmZpbmQoJ2RpdmlzaW9uJylcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj5IeWxhIFNvZnQgVVNBPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPkh5bGEgU29mdCBJdGFseTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj5IeWxhIHNvZnQgQnJhemlsPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJkZXBhcnRtZW50XCI+RGVwYXJ0bWVudDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9XCJkZXBhcnRtZW50XCIgW25nRm9ybUNvbnRyb2xdPVwibXlGb3JtLmZpbmQoJ2RlcGFydG1lbnQnKVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPlNvZnR3YXJlPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPlBMTTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj5NRVM8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cIk1hbmFnZXJcIj5NYW5hZ2VyPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpZD1cIm1hbmFnZXJcIiBbbmdGb3JtQ29udHJvbF09XCJteUZvcm0uZmluZCgnbWFuYWdlcicpXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+VW5hc3NpZ25lZDwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj5EYXZpZCBLYXBhcmlzPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPkV0dG9yZSBTb2xkaTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj5KYXNvbiBNY0RvbmFsZDwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiZW1wbG95ZWVzXCI+RW1wbG95ZWVzPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpZD1cImVtcGxveWVlc1wiIFtuZ0Zvcm1Db250cm9sXT1cIm15Rm9ybS5maW5kKCdlbXBsb3llZXMnKVwiIG11bHRpcGxlIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPlBhdWwgU2llYmVydDwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj5DYXNleSBUb3duc2VuZDwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj5Kb24gTmV0emt5PC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPkRhcmlvIENhc3VsYTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj5Mb2dhbiBIYWJiZW48L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cInByb2plY3RzXCI+UHJvamVjdHM8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPVwicHJvamVjdHNcIiBbbmdGb3JtQ29udHJvbF09XCJteUZvcm0uZmluZCgncHJvamVjdHMnKVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPkt1a2E8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+TW9uc2FudG88L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+V2lsbGlhbXM8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2FjY29yZGlvbi1ncm91cD5cclxuICAgICAgICAgICAgICAgIDxhY2NvcmRpb24tZ3JvdXAgaGVhZGluZz1cIlJlc3VtZSAob3B0aW9uYWwpXCI+PGgxPlJlc3VtZSBVcGxvYWQgQ2FwYWJpbGl0eSAmIHNraWxscyBzZWN0aW9uPC9oMT48L2FjY29yZGlvbi1ncm91cD5cclxuICAgICAgICAgICAgICAgIDxhY2NvcmRpb24tZ3JvdXAgaGVhZGluZz1cIlRyYWluaW5nIChvcHRpb25hbClcIj48aDE+VHJhaW5pbmcgYW5kIEluZm88L2gxPjwvYWNjb3JkaW9uLWdyb3VwPlxyXG4gICAgICAgICAgICAgICAgPGFjY29yZGlvbi1ncm91cCBoZWFkaW5nPVwiQmVuZWZpdHMgKG9wdGlvbmFsKVwiPjxoMT5CZW5lZml0cyBpbmZvcm1hdGlvbjwvaDE+PC9hY2NvcmRpb24tZ3JvdXA+XHJcbiAgICAgICAgICAgIDwvYWNjb3JkaW9uPlxyXG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeSBidG4tbGdcIj5TdWJtaXQ8L2J1dHRvbj5cclxuICAgICAgICA8L2Zvcm0+XHJcbiAgICBgLFxyXG4gICAgcHJvdmlkZXJzOltFbXBsb3llZVNlcnZpY2VdLFxyXG4gICAgZGlyZWN0aXZlczpbQWNjb3JkaW9uQ29tcG9uZW50LEFjY29yZGlvbkNvbXBvbmVudEdyb3VwXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmV3RW1wbG95ZWVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXR7XHJcbiAgICBteUZvcm06Q29udHJvbEdyb3VwO1xyXG4gICAgY291bnRyeTpTdHJpbmc9Jyc7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9mYjpGb3JtQnVpbGRlcixwcml2YXRlIF9lbXBsb3llZVNlcnZpY2U6RW1wbG95ZWVTZXJ2aWNlLHByaXZhdGUgX2Vycm9yU2VydmljZSA6IEVycm9yU2VydmljZSl7fVxyXG4gICAgbmdPbkluaXQoKXtcclxuICAgICAgICB0aGlzLm15Rm9ybT10aGlzLl9mYi5ncm91cCh7XHJcbiAgICAgICAgICAgIGZpcnN0TmFtZTpbJycsVmFsaWRhdG9ycy5yZXF1aXJlZF0sXHJcbiAgICAgICAgICAgIGxhc3ROYW1lOlsnJyxWYWxpZGF0b3JzLnJlcXVpcmVkXSxcclxuICAgICAgICAgICAgZW1haWw6WycnLFZhbGlkYXRvcnMuY29tcG9zZShbXHJcbiAgICAgICAgICAgICAgICBWYWxpZGF0b3JzLnJlcXVpcmVkLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0VtYWlsXHJcbiAgICAgICAgICAgIF0pXSxcclxuICAgICAgICAgICAgcGhvbmU6WycnLFZhbGlkYXRvcnMucmVxdWlyZWRdLFxyXG4gICAgICAgICAgICBjb3VudHJ5OlsnJyxWYWxpZGF0b3JzLnJlcXVpcmVkXSxcclxuICAgICAgICAgICAgY2l0eTpbJycsVmFsaWRhdG9ycy5yZXF1aXJlZF0sXHJcbiAgICAgICAgICAgIHN0YXRlOlsnJ10sXHJcbiAgICAgICAgICAgIHRpdGxlOlsnJ10sXHJcbiAgICAgICAgICAgIGRpdmlzaW9uOlsnJ10sXHJcbiAgICAgICAgICAgIGRlcGFydG1lbnQ6WycnXSxcclxuICAgICAgICAgICAgcHJvamVjdHM6IFsnJ10sXHJcbiAgICAgICAgICAgIGVtcGxveWVlczogWycnXSxcclxuICAgICAgICAgICAgbWFuYWdlcjogWycnXVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbiAgICBvbkNvdW50cnlDaGFuZ2UodmFsKXtcclxuICAgICAgICB0aGlzLmNvdW50cnk9dmFsO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHZhbCk7XHJcbiAgICB9XHJcbiAgICBvblN1Ym1pdCgpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdzdWJtaXR0ZWQnKTtcclxuICAgICAgICBjb25zdCBlbXBsb3llZSA9IG5ldyBFbXBsb3llZShcclxuICAgICAgICAgICAgdGhpcy5teUZvcm0udmFsdWUuZW1haWwsXHJcbiAgICAgICAgICAgIG51bGwsXHJcbiAgICAgICAgICAgIHRoaXMubXlGb3JtLnZhbHVlLmZpcnN0TmFtZSxcclxuICAgICAgICAgICAgdGhpcy5teUZvcm0udmFsdWUubGFzdE5hbWUsXHJcbiAgICAgICAgICAgIHRoaXMubXlGb3JtLnZhbHVlLnBob25lLFxyXG4gICAgICAgICAgICB0aGlzLm15Rm9ybS52YWx1ZS5jb3VudHJ5LFxyXG4gICAgICAgICAgICB0aGlzLm15Rm9ybS52YWx1ZS5jaXR5LFxyXG4gICAgICAgICAgICB0aGlzLm15Rm9ybS52YWx1ZS5zdGF0ZSxcclxuICAgICAgICAgICAgdGhpcy5teUZvcm0udmFsdWUudGl0bGUsXHJcbiAgICAgICAgICAgIHRoaXMubXlGb3JtLnZhbHVlLmRpdmlzaW9uLFxyXG4gICAgICAgICAgICB0aGlzLm15Rm9ybS52YWx1ZS5kZXBhcnRtZW50LFxyXG4gICAgICAgICAgICB0aGlzLm15Rm9ybS52YWx1ZS5tYW5hZ2VyLFxyXG4gICAgICAgICAgICB0aGlzLm15Rm9ybS52YWx1ZS5lbXBsb3llZXMsXHJcbiAgICAgICAgICAgIHRoaXMubXlGb3JtLnZhbHVlLnByb2plY3RzXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhlbXBsb3llZSk7XHJcbiAgICAgICAgdGhpcy5fZW1wbG95ZWVTZXJ2aWNlLmNyZWF0ZVVzZXIoZW1wbG95ZWUpLnN1YnNjcmliZShcclxuICAgICAgICAgICAgZGF0YSA9PiBjb25zb2xlLmxvZyhkYXRhKSxcclxuICAgICAgICAgICAgZXJyb3IgPT4gY29uc29sZS5sb2coZXJyb3IpXHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBpc0VtYWlsKGNvbnRyb2wgOiBDb250cm9sKToge1tzOnN0cmluZ106Ym9vbGVhbn17XHJcbiAgICAgICAgaWYoIWNvbnRyb2wudmFsdWUubWF0Y2goXCJbLWEtejAtOX4hJCVeJipfPSt9e1xcJz9dKyhcXC5bLWEtejAtOX4hJCVeJipfPSt9e1xcJz9dKykqQChbYS16MC05X11bLWEtejAtOV9dKihcXC5bLWEtejAtOV9dKykqXFwuKGFlcm98YXJwYXxiaXp8Y29tfGNvb3B8ZWR1fGdvdnxpbmZvfGludHxtaWx8bXVzZXVtfG5hbWV8bmV0fG9yZ3xwcm98dHJhdmVsfG1vYml8W2Etel1bYS16XSl8KFswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM30pKSg6WzAtOV17MSw1fSk/XCIpKXtcclxuICAgICAgICAgICAgcmV0dXJuIHtpbnZhbGlkTWFpbDp0cnVlfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
